// Code generated by MockGen. DO NOT EDIT.
// Source: usecase/output/port/o_auth_output_port.go

// Package mock_outputport is a generated GoMock package.
package mock_outputport

import (
	model "cln-arch/domain/model"
	outputdata "cln-arch/usecase/output/data"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockOAuthOutputPort is a mock of OAuthOutputPort interface
type MockOAuthOutputPort struct {
	ctrl     *gomock.Controller
	recorder *MockOAuthOutputPortMockRecorder
}

// MockOAuthOutputPortMockRecorder is the mock recorder for MockOAuthOutputPort
type MockOAuthOutputPortMockRecorder struct {
	mock *MockOAuthOutputPort
}

// NewMockOAuthOutputPort creates a new mock instance
func NewMockOAuthOutputPort(ctrl *gomock.Controller) *MockOAuthOutputPort {
	mock := &MockOAuthOutputPort{ctrl: ctrl}
	mock.recorder = &MockOAuthOutputPortMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockOAuthOutputPort) EXPECT() *MockOAuthOutputPortMockRecorder {
	return m.recorder
}

// Auth mocks base method
func (m *MockOAuthOutputPort) Auth(arg0 *model.OAuthState) *outputdata.Auth {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Auth", arg0)
	ret0, _ := ret[0].(*outputdata.Auth)
	return ret0
}

// Auth indicates an expected call of Auth
func (mr *MockOAuthOutputPortMockRecorder) Auth(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Auth", reflect.TypeOf((*MockOAuthOutputPort)(nil).Auth), arg0)
}

// Callback mocks base method
func (m *MockOAuthOutputPort) Callback(arg0 *model.User) *outputdata.Callback {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Callback", arg0)
	ret0, _ := ret[0].(*outputdata.Callback)
	return ret0
}

// Callback indicates an expected call of Callback
func (mr *MockOAuthOutputPortMockRecorder) Callback(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Callback", reflect.TypeOf((*MockOAuthOutputPort)(nil).Callback), arg0)
}
