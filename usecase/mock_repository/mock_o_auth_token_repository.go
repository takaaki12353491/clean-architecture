// Code generated by MockGen. DO NOT EDIT.
// Source: usecase/repository/o_auth_token_repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	model "cln-arch/domain/model"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockOAuthTokenRepository is a mock of OAuthTokenRepository interface
type MockOAuthTokenRepository struct {
	ctrl     *gomock.Controller
	recorder *MockOAuthTokenRepositoryMockRecorder
}

// MockOAuthTokenRepositoryMockRecorder is the mock recorder for MockOAuthTokenRepository
type MockOAuthTokenRepositoryMockRecorder struct {
	mock *MockOAuthTokenRepository
}

// NewMockOAuthTokenRepository creates a new mock instance
func NewMockOAuthTokenRepository(ctrl *gomock.Controller) *MockOAuthTokenRepository {
	mock := &MockOAuthTokenRepository{ctrl: ctrl}
	mock.recorder = &MockOAuthTokenRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockOAuthTokenRepository) EXPECT() *MockOAuthTokenRepositoryMockRecorder {
	return m.recorder
}

// Store mocks base method
func (m *MockOAuthTokenRepository) Store(arg0 *model.OAuthToken) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Store", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Store indicates an expected call of Store
func (mr *MockOAuthTokenRepositoryMockRecorder) Store(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockOAuthTokenRepository)(nil).Store), arg0)
}
