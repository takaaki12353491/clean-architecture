// Code generated by MockGen. DO NOT EDIT.
// Source: usecase/repository/o_auth_state_repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	model "cln-arch/domain/model"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockOAuthStateRepository is a mock of OAuthStateRepository interface
type MockOAuthStateRepository struct {
	ctrl     *gomock.Controller
	recorder *MockOAuthStateRepositoryMockRecorder
}

// MockOAuthStateRepositoryMockRecorder is the mock recorder for MockOAuthStateRepository
type MockOAuthStateRepositoryMockRecorder struct {
	mock *MockOAuthStateRepository
}

// NewMockOAuthStateRepository creates a new mock instance
func NewMockOAuthStateRepository(ctrl *gomock.Controller) *MockOAuthStateRepository {
	mock := &MockOAuthStateRepository{ctrl: ctrl}
	mock.recorder = &MockOAuthStateRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockOAuthStateRepository) EXPECT() *MockOAuthStateRepositoryMockRecorder {
	return m.recorder
}

// FindByState mocks base method
func (m *MockOAuthStateRepository) FindByState(arg0 string) (*model.OAuthState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByState", arg0)
	ret0, _ := ret[0].(*model.OAuthState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByState indicates an expected call of FindByState
func (mr *MockOAuthStateRepositoryMockRecorder) FindByState(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByState", reflect.TypeOf((*MockOAuthStateRepository)(nil).FindByState), arg0)
}

// Store mocks base method
func (m *MockOAuthStateRepository) Store(arg0 *model.OAuthState) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Store", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Store indicates an expected call of Store
func (mr *MockOAuthStateRepositoryMockRecorder) Store(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockOAuthStateRepository)(nil).Store), arg0)
}

// Delete mocks base method
func (m *MockOAuthStateRepository) Delete(arg0 *model.OAuthState) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockOAuthStateRepositoryMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockOAuthStateRepository)(nil).Delete), arg0)
}
